class EratosthenesUtil {
    /**
     * Generates a sequence of all primes less than or equal to the specified parameter
     * @param n the upperbound on the prime sequence
     * @return an array list containing all primes in [2,n] or an empty array
	 * list if n < 2.
     */
   public static ArrayList<Long> sieve(long n){
		
		ArrayList<Long> primes = new ArrayList<>(); //list of primes
		
		//if n is less than 2, return empty list.
		if(n < 2){
			return primes;
		}else{
			
			//make a boolean array
			boolean isPrime[] = new boolean[(int)n + 1];
			
			//mark all as true
	        for (int i = 0; i <= n; i++)
	            isPrime[i] = true;
	 	
	 		//now traverse
	        for (int i = 2; i * i <= n; i++) {
	            
	            //if it is prime then,
	            if (isPrime[i] == true) {
	                
	                //mark multiples as false
	                for (int j = i * i; j <= n; j += i)
	                    isPrime[j] = false;
	            }
	        }
	 
	        //insert all the primes to the list
	        for (int i = 2; i <= n; i++) {
	            if (isPrime[i] == true)
	            	primes.add((long)i);
	        }
	        
	        return primes;//return the list.
			
		}
    }
	
	/**
     * Gives a string representation of the specified array list of longs
     * enclosed in a pair of curly brackets and each adjacent pair of primes 
     * separated by a comma followed by a space.
     * @param v an array list of longs
     * @return a string representation of an array list of longs
     */
	public static String toString(ArrayList<Long> v){
		String ans = "{";
		 for (int i = 0; i < v.size() - 1; i++) {
	           ans = ans + v.get(i) +", ";
	     }
	     
	     ans = ans + v.get(v.size()-1) + "}";
		return ans;
	}
		
}
